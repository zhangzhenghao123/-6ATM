#include<stdio.h>
#include<stdlib.h> 

struct Account
{
	char name[100];//姓名 
	char tel[12];//电话 
	char idCard[19];//身份证	
	char username[20];//银行账号卡号
	char password[7];//密码 
	float money;//余额
	
	struct Account * next; //下一个账户结点的地址 
};
typedef struct Account Account; 

Account * head;//指向头结点的头指针
Account * tail;//指向尾结点的尾指针 
struct Account
{
	char username[100];
	char password[100];	
	
	struct Account * next;
};
typedef struct Account Account;

Account * head=NULL;//指向头结点 
Account * tail=NULL;//指向尾结点 

//加载成功返回1，否则返回0 
void showMenuEnglish()
{
	
}

void signUpChinese()
{
	//申请一块堆内存空间，将其地址赋值给指针newNodeP（不理解局部变量和全局变量的同学们观看群里的视频C语言内存分配） 
	Account * newNodeP=(Account *)malloc(sizeof(Account));
	printf("请输入姓名：\n"); 
	scanf("%s",newNodeP->name);
	
	printf("请输入电话：\n");
	scanf("%s",newNodeP->tel); 
	
	printf("请输入身份证：\n");
	scanf("%s",newNodeP->idCard); 
	
	printf("请输入账号：\n");
	scanf("%s",newNodeP->username); //账号应该是有银行给的，应该是系统生成的，思考怎么做？
	
	printf("请输入密码：\n");
	scanf("%s",newNodeP->password); 
	
	newNodeP->money=0.0f;
	newNodeP->next=NULL;
	
	//添加结点到链表中
	if(head==NULL)
	{
		head=newNodeP;
		tail=newNodeP;
	} 
	else
	{
		tail->next=newNodeP;
		tail=newNodeP;
	}
	
	printf("添加成功\n");
	system("pause");
}

void signInChinese()
{
	
}

void signOut()
{
	exit(0);
}

void showMenuChinese()
{
	while(1)
	{
		system("cls");
		printf("按1，开户\n");
		printf("按2，登录\n");
		printf("按3，退出\n");
		int n;
		scanf("%d",&n);
		if(n==1)
		{
			signUpChinese();
		}
		else if(n==2)
		{
			signInChinese();
		}
		else if(n==3)
		{
			signOut();
		}
	}
}

int main()
{
	printf("Press 1, English Service\n");
	printf("按2，中文服务\n");
	int language;
	scanf("%d",&language);
	if(language==1)
	{
		showMenuEnglish(); //显示文中菜单 
	}
	else if(language==2)
	{
		showMenuChinese(); //显示英文菜单 
	}



void loadData()
{
	FILE* fp=fopen("D:/atm.txt","r");
	if(fp!=NULL)
	{
		while(!feof(fp))
		{
			//创建结点
			Account * newNode=(Account *)malloc(sizeof(Account)); 
			
			//结点初始化
			newNode->next=NULL;
			fscanf(fp,"%s %s\n",newNode->username,newNode->password); 
			
			//添加结点到链表
			if(head==NULL)
			{
				head=newNode;
				tail=newNode;	
			} 
			else
			{
				tail->next=newNode;
				tail=newNode; 
			}
		}
		fclose(fp);
	} 
} 

void printLinkedList()
{
	Account * curP=head;
	while(curP!=NULL)
	{
		printf("%s\t%s\n",curP->username,curP->password);
		curP=curP->next;
	}
}

void saveData()
{
	FILE* fp=fopen("D:/atm.txt","w"); 
	if(fp!=NULL)
	{
		Account * curP=head;
		while(curP!=NULL)
		{
			fprintf(fp,"%s\t%s\n",curP->username,curP->password);
			curP=curP->next; 
		}
		fclose(fp);
	}
}

void signUp()
{
	Account * newNode=(Account *)malloc(sizeof(Account));
	newNode->next=NULL;
	printf("请输入账号：\n");
	scanf("%s",newNode->username);
	
	printf("请输入密码：\n");
	scanf("%s",newNode->password);
	
	tail->next=newNode;
	tail=newNode;
	
	printf("注册成功！\n");
}

int main()
{
	loadData();
	
	
	signUp();
	
	printLinkedList();
	
	
	saveData();
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>

struct Transaction
{
	char username[100];
	time_t timestamp;
	int type;//0-取款，1-存款
	int amount;
	
	struct Transaction * next;
};
typedef struct Transaction Transaction;

//交易记录信息链表 
Transaction * tHead=NULL;
Transaction * tTail=NULL;


struct Account
{
	char username[100];
	char password[100];	
	
	int money;
	
	struct Account * next;
};
typedef struct Account Account;

//账户信息链表 
Account * head=NULL;//指向头结点的指针
Account * tail=NULL;//指向尾结点的指针 
Account * curAccount=NULL;//指向当前登录账户的指针 

//找到返回1，否则返回0 
int findAccount(Account a)
{
	Account *curP=head;
	while(curP!=NULL)
	{
		if((strcmp(curP->username,a.username)==0)&&(strcmp(curP->password,a.password)==0))
		{
			curAccount=curP;
			return 1;
		}
		curP=curP->next;
	} 
	return 0;
}

void updatePassword()
{
	printf("请输入旧密码:\n");
	char oldPassword[100]={'\0'};
	scanf("%s",oldPassword);
	if(strcmp(oldPassword,curAccount->password)==0)
	{
		//让其修改 
		printf("请输入新密码：\n");
		scanf("%s",curAccount->password);
		printf("修改成功！\n");
	}
	else
	{
		printf("旧密码输入错误，拒绝修改！\n");
	} 
	
}

void drawMoney()
{
	printf("请输入取款金额：");
	int money;
	scanf("%d",&money);
	
	//验证金额
	if(curAccount->money>=money)
	{
		printf("取款成功！\n");
		curAccount->money-=money;
		
		//产生交易记录...	
		
		//创建结点
		Transaction * newNode=(Transaction*)malloc(sizeof(Transaction)); 
		
		//结点初始化
		newNode->next=NULL;
		strcpy(newNode->username,curAccount->username);
		newNode->timestamp=time(NULL);
		newNode->type=0;
		newNode->amount=money;
		
		//添加结点到链表
		if(tHead==NULL)
		{
			tHead=newNode;
			tTail=newNode;
		}
		else
		{
			tTail->next=newNode;
			tTail=newNode;
		}
	} 
	else
	{
		printf("余额不足！\n");
	}
}

void saveMoney()
{
	printf("请输入存款金额：");
	int money;
	scanf("%d",&money);
	printf("存款成功！\n");
	curAccount->money+=money;
	
	//产生交易记录...	
	
}

void homePage()
{
	system("cls");
	//updatePassword(); 
	
	drawMoney();
	//saveMoney();
}

void signIn()
{
	for(int i=0;i<3;i++)
	{
		Account a; 
		printf("欢迎登录\n");
		printf("请输入账号：\n");
		scanf("%s",a.username);
		
		printf("请输入密码：\n");
		scanf("%s",a.password);
		
		if(findAccount(a))
		{
			homePage();
			return;
		}
		else
		{
			printf("登录失败!\n");
		}
	} 
}

/**
如果数据加载成功返回1
否则返回0 
*/
int loadData()
{
	FILE* fp=fopen("D:/atm.txt","r");
	if(fp==NULL)
	{
		return 0; 
	}
	else
	{
		while(!feof(fp))
		{
			//创建结点：在堆上申请一块内存空间，将其地址赋值给指针newNode
			Account * newNode=(Account *)malloc(sizeof(Account)); 
			
			//结点赋值：结点初始化
			newNode->next=NULL;
			fscanf(fp,"%s %s %d\n ",newNode->username,newNode->password,&newNode->money);
			
			//添加结点到链表
			if(head==NULL)
			{
				head=newNode;
				tail=newNode;
			}
			else
			{
				tail->next=newNode;
				tail=newNode;
			}
		}
		return 1;
	}

}

void saveTransaction()
{
	
}

int main()
{
	int status=loadData();//加载账户信息 
	//loadTransaction();//加载交易记录信息
	 
	if(status==1)
	{
		printf("加载成功！\n");
	}
	else
	{
		printf("加载失败！\n");
	}
	
	
	signIn();
	
	//saveData();//保存账户信息
	saveTransaction();//保存交易记录 
	return 0;
}


